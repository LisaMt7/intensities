(()=>{var E=(t,e)=>Math.sqrt(t*t+e*e),A=t=>t.reduce((e,a)=>e+a,0)/t.length,y=(t,e,a="euclidean")=>A(t.map((r,m)=>A(r.map((c,n)=>E(c,e[m][n])))));var M=(t,e)=>W(t,e,(a,r)=>(a+r)/2),W=(t,e,a)=>t.map((r,m)=>r.map((c,n)=>a(c,e[m][n])));function _(t){let e=t.length,a;for(;e!=0;)a=Math.floor(Math.random()*e),e--,[t[e],t[a]]=[t[a],t[e]];return t}var D=_;onmessage=async function(t){let[e,...a]=t.data,r;e==="process"?r=await k(...a):console.error("Unrecognized message in worker",e),postMessage(["done",r])};async function k(t,e){e.startTime||(e.startTime=Date.now()),e.changed=!1;let a=t.length,r=0;!!t[0].frequencies[0]?.length||t.forEach(p=>p.frequencies=[p.frequencies]);let c=t[0].frequencies;e.frequencies=c[0].length;let n=[];c.forEach((p,u)=>{e.history[0].length===e.duration&&(n.push(Object.assign({},e.history)),e.history=e.history.map(g=>[])),t.map(g=>g.frequencies[u]).forEach((g,f)=>{e.history[f]||(e.history[f]=[]),e.history[f].push(g)})}),e.shuffle&&(n=D(n));let T=n.forEach(async(p,u)=>{let g=performance.now(),z=Array.from({length:Math.ceil(e.frequencies/e.freqWindow)},(v,o)=>o*e.freqWindow).forEach(async v=>{let o=v,q=v+e.freqWindow;e.patterns[o]||(e.patterns[o]=[]);let w=e.patterns[o];if(q<e.frequencies){let i=[];for(let s=0;s<a;s++){let l=p[s].map(d=>Array.from(d).slice(o,q));i.push(l)}let b=(Date.now()-e.startTime)/1e3,h=!1;if(w.forEach(s=>{let l=s.average,d=y(i[0],l[0]),x=y(i[1],l[1]);(d+x)/2<e.distanceMax&&(h?h.push(s):h=[s])}),!h){let s={id:Math.floor(1e5*Math.random()),times:[{t:b,i:u}],bin:v,average:i};h=[s],w.push(s)}else h.forEach(s=>{s.times.push({t:b,i:u,original:i}),s.average[0]=M(s.average[0],i[0]),s.average[1]=M(s.average[1],i[1])});h.forEach(s=>{let l=s.times.length,d=!0,x=!0;l>1&&(d||x)&&(e.alphabet.has(s.id)||r++,e.alphabet.set(s.id,l),e.alphabetData.set(s.id,{average:s.average,start:o,end:q,times:s.times,bin:s.bin}),e.changed=!0)})}}),I=performance.now(),P=(u+1)/n.length;postMessage(["progress",P,I-g,r])});return console.log("outer promises",T),e}})();
